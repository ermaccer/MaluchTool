#include "pthfile.h"
#include "depak.h"
#include <Windows.h>
#include <filesystem>
#include <vector>

bool EPathFile::ProcessToText()
{
	std::wstring inPath = SetPathFromButton(L"Path (*.pth)\0*.pth\0All Files (*.*)\0*.*\0", L"pth", 0);
	std::ifstream pFile(inPath, std::ifstream::binary);

	if (!pFile && inPath.length() > 0)
	{
		MessageBox(0, L"Failed to open input file!", 0, MB_ICONWARNING);
		return false;
	}

	if (pFile)
	{
		pth_header pth;
		pFile.read((char*)&pth, sizeof(pth_header));

		if (!(strcmp(pth.header, "PATH00") == 0))
		{
			MessageBox(0, L"This is not a valid path file!", 0, MB_ICONWARNING);
			return false;
		}

		std::wstring out = SetSavePathFromButton(L"Text (*.txt)\0*.txt\0All Files (*.*)\0*.*\0", L"txt", 0);
		std::ofstream oFile(out, std::ofstream::binary);
		oFile << "; path info generated by MaluchTool" << std::endl;
		for (int i = 0; i < pth.points; i++)
		{
			pth_point point;
			pFile.read((char*)&point, sizeof(pth_point));
			oFile << point.x << " " << point.y << " " << point.z << " " << point.unk1 << " " << point.unk2 << std::endl;
		}


		return true;

	}
}

bool EPathFile::ProcessToPath()
{
	std::wstring inPath = SetPathFromButton(L"Text (*.txt)\0*.txt\0All Files (*.*)\0*.*\0", L"txt", 0);
	FILE* pFile = _wfopen(inPath.c_str(), L"rb");
	std::vector<pth_point> points;
	if (!pFile && inPath.length() > 0)
	{
		MessageBox(0, L"Failed to open input file!", 0, MB_ICONWARNING);
		return false;
	}

	if (pFile)
	{
		char szLine[1024];
		while (fgets(szLine, sizeof(szLine), pFile))
		{
			if (szLine[0] == ' ' || szLine[0] == ';' || szLine[0] == '#')
				continue;
			float x;
			if (sscanf(szLine, "%f", &x) == 1)
			{
				float y, z;
				int unk1, unk2;
				sscanf(szLine, "%f %f %f %d %d", &x, &y, &z, &unk1, &unk2);
				pth_point point = { x,y,z,unk1,unk2 };
				points.push_back(point);
			}
		}


		std::wstring out = SetSavePathFromButton(L"Path (*.pth)\0*.pth\0All Files (*.*)\0*.*\0", L"pth", 0);
		std::ofstream oFile(out, std::ofstream::binary);

		pth_header pth;
		sprintf(pth.header, "PATH00");
		pth.points = points.size();

		oFile.write((char*)&pth, sizeof(pth_header));

		for (int i = 0; i < points.size(); i++)
			oFile.write((char*)&points[i], sizeof(pth_point));



		return true;

	}
}

